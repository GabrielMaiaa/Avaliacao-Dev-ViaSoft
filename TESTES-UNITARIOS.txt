Teste Unitário para EmailController
	
        --> Configuração dos Testes:
            A classe EmailControllerTest está anotada com várias anotações para configurar o ambiente de teste.
            Por exemplo, @ExtendWith(SpringExtension.class) e @SpringBootTest(webEnvironment = RANDOM_PORT) são usadas para configurar o ambiente Spring.

        --> Inicialização de Dependências:
            Duas dependências são injetadas usando a anotação @Autowired: EmailService e EmailController.
            Isso é necessário para simular a execução real da aplicação.

        --> Teste de Envio de E-mail Bem-Sucedido:
            O método sendEmail_succeeds() testa se o envio de um e-mail é bem-sucedido.
            Ele cria um objeto EmailDTO com detalhes simulados do e-mail e chama o método sendEmail() do controlador de e-mail.
            Em seguida, verifica se a resposta HTTP é HttpStatus.NO_CONTENT, o que indica que o e-mail foi enviado com sucesso.

        --> Teste de Exceção de Argumento Inválido:
            O método sendEmail_throwsIllegalArgumentException() testa se uma exceção IllegalArgumentException é lançada quando
            o e-mail contém um endereço de destinatário inválido (muito longo). Ele cria um objeto EmailDTO com um endereço de e-mail
            muito longo e verifica se uma exceção é lançada ao chamar o método sendEmail() do controlador de e-mail.