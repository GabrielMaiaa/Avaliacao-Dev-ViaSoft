Teste Unitário para EmailService
	Objetivo: 
		-->Verificar se o método sendEmail do EmailService funciona corretamente, incluindo a integração com diferentes serviços de e-mail (AWS, OCI) e a validação dos objetos DTO.
	Descrição:
		-->Para cada tipo de integração (AWS, OCI):
		-->Configuramos mocks para simular o comportamento dos objetos relacionados (conversores, validador, logger).
		-->Criamos um objeto EmailDTO com dados de exemplo.
		-->Chamamos o método sendEmail do EmailService com o EmailDTO.
		-->Verificamos se a conversão para o tipo correto de DTO é feita.
		-->Verificamos se a validação do DTO é feita corretamente.
		-->Verificamos se o logger é chamado corretamente.
		-->Para uma integração não suportada:
		-->Configuramos um mock para simular o comportamento do objeto relacionado.
		-->Criamos um objeto EmailDTO com dados de exemplo.
		-->Chamamos o método sendEmail do EmailService com o EmailDTO.
		-->Verificamos se uma IllegalArgumentException é lançada com a mensagem apropriada.


Teste Unitário para EmailController
	Objetivo: 
		-->Garantir que o endpoint /emails/send-email do EmailController funcione corretamente, incluindo o tratamento de exceções.
	Descrição:
		-->Configuramos mocks para simular o comportamento do serviço de e-mail.
		-->Criamos um objeto EmailDTO com dados de exemplo.
		-->Chamamos o endpoint /emails/send-email com o EmailDTO.
		-->Verificamos se o serviço de e-mail é chamado corretamente.
		-->Verificamos se o status de resposta é 204 No Content em caso de sucesso.
		-->Verificamos se o status de resposta é 400 Bad Request em caso de falha (exceção lançada pelo serviço de e-mail).