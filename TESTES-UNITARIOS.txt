Teste Unitário para EmailService

	--> testSendEmailWithAwsIntegration: 
		Testa se o método sendEmail lida corretamente com a integração AWS. 
		Configura a integração como AWS, verifica se a conversão para EmailAwsDTO 
		é chamada e se o método validate de EmailAwsValidator é invocado uma vez.

	--> testSendEmailWithOciIntegration: 
		Testa se o método sendEmail lida corretamente com a integração OCI. 
		Configura a integração como OCI, verifica se a conversão para EmailOciDTO é chamada
		e se o método validate de EmailOciValidator é invocado uma vez.

	--> testSendEmailWithUnsupportedIntegration: 
		Testa se o método sendEmail lida corretamente com uma integração não suportada. 
		Configura a integração como não suportada e verifica se uma exceção IllegalArgumentException
		é lançada ao tentar enviar um email.


Teste Unitário para EmailController
	
	--> Configuração do Teste:
		O teste é anotado com @WebMvcTest(EmailController.class) para carregar apenas a camada web do controlador EmailController.
		EmailController é injetado (@InjectMocks) e EmailService é mockado (@Mock).
		MockitoAnnotations.initMocks(this) é usado para inicializar os mocks antes de cada teste.

	--> Teste do Método sendEmail:

		Um objeto EmailDTO é criado para simular um e-mail a ser enviado.
		O método sendEmail do controlador é invocado com este objeto.
		É verificado se o código de status da resposta é NO_CONTENT, indicando que o e-mail foi enviado com sucesso.
		Verifica se o método sendEmail de EmailService foi chamado uma vez com o objeto EmailDTO.